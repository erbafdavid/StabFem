include "Params.edp";


//////////////////////////////////////////////////////////////////////////////////////////////
real Rey=49.0;        //Reynolds Number
real M=0.03;          ////////////////// MACH NUMBER   //////////////////////////
real Mbflow=M;
real gamma=1.4; //////////////////         GAMMA        //////////////////////////
real Pr=0.7;         //////////////////  PRANDTL NUM   //////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////// MODES PARAMETERS ////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////

complex sigma=0.01+0.71i;
int nev=4;  // eigenvalues number
int ncv=10;
real ttgv=1e30;


// check that ncv is big enough
//ncv=max(2*nev,ncv);


///
/// -------------------------------------------------------------------------------
/// -------------------------------------------------------------------------------
load "MUMPS_FreeFem"
load "scotch"
load "iovtk"
//load "./CPP_FUNCTIONS/BinaryIO_64";
//load "./CPP_FUNCTIONS/ComplexIO_64";


string ssparams="";//nprow="+npr+", npcol="+npc;

//////////////////////////////////////////////////////////////////////////////////////////////


func bb=[[xinfm,-yinf],[xinfv,yinf]];

//////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////
if(mpirank==0)
{
cout << "$$$$$$$$$$$$$$$$   Parameter Settings   $$$$$$$$$$$$$$$$ " << endl;
cout << "$$$                                                      " << endl;
cout << "$$$             Mach           -->    " << M << endl;
cout << "$$$             Reynolds       -->    " << Rey << endl;
cout << "$$$             Shift(sigma)   -->    " << sigma << endl;
cout << "$$$             N.Eigenvalues  -->    " << nev << endl;
cout << "$$$                                                      " << endl;
cout << "$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ " << endl;
}
///////////////////////////////////////////////////////////////////////////////////////////////

mesh th;
if(mpirank==0)
  {
    th=readmesh(pht+namemesh);
    int[int] nupart(th.nt);
    nupart=0; 
    if(mpisize>1)
      scotch(nupart, th, mpisize);
    th=change(th,fregion= nupart[nuTriangle]);
    
  }
broadcast(processor(0),th); 


///////////////////////////////////////////////////////////////////////////////////////////////
fespace XH2(th,P2);
///////////////////////////////////////////////////////////////////////////////////////////////
fespace XXxxxH(th,[P2,P2,P1,P1,P1]); /// 
///////////////////////////////////////////////////////////////////////////////////////////////

XH2 AMPFORCE=AmpSponge(M);
//////////////////////////// MARCRO /////////////////////////// 
    

macro def(u,p,T,rho)[u#x,u#y,p,T,rho]//EOF

XXxxxH def(Ub,Pb,Tb,Rhob);



macro div(u) ((dx(u#x)+dy(u#y)))   //EOM
  macro ugradf(u,f) ((u#x*dx(f)+u#y*dy(f)))    //
//macro gradfgradf(f,f1) ((dx(f)*dx(f1)+dy(f)*dy(f1)))  //
//macro strain(u1,u2,v1,v2) ((dx(u1)*dx(v1)+(1./2)*(dx(u2)+dy(u1))*(dx(v2)+dy(v1))+dy(u2)*dy(v2)))  //
  macro termnonlinear(u,v,w) ((w#x*(u#x*dx(v#x)+u#y*dy(v#x))+w#y*(u#x*dx(v#y)+u#y*dy(v#y)))) //
  macro Grad(u) [[dx(u#x),dx(u#y)],[dy(u#x),dy(u#y)]]//EOM
  macro Strain(u)[[dx(u#x),0.5*(dx(u#y)+dy(u#x))],[0.5*(dx(u#y)+dy(u#x)),dy(u#y)]]//EOM
  macro gradgrad(u,v)(dx(u)*dx(v)+dy(u)*dy(v))//EOM
  
  varf dirichlet(def(du,dp,dT,drho),def(us,ps,Ts,rhos))=on(bcinlet,dux=1.0-Ubx,duy=0.0-Uby,dT=1.-Tb)
  +on(bcoutlet,duy=0.0-Uby)
  +on(bcnoslip,dux=0.0-Ubx,duy=0.0-Uby);

real ssvv=1e-10;
varf op(def(du,dp,dT,drho),def(us,ps,Ts,rhos))=-int2d(th,mpirank)(rhos*(drho*div(Ub)+Rhob*div(du)+ugradf(Ub,drho)+ugradf(du,Rhob)) 
								       //mass equation
								       -dp*div(us)+2.0/Rey*(Strain(du):Grad(us))-2.0/(3.0*Rey)*(div(du)*div(us))+Rhob*termnonlinear(du,Ub,us)+drho*termnonlinear(Ub,Ub,us)+Rhob*termnonlinear(Ub,du,us)
								       //momentum
								  +Ts*(drho*ugradf(Ub,Tb)+Rhob*ugradf(Ub,dT)+Rhob*ugradf(du,Tb)+(gamma-1)*(drho*Tb*div(Ub)+Rhob*dT*div(Ub)+Rhob*Tb*div(du))-gamma*(gamma-1.0)*M^2/Rey*(2.0*((Strain(du):Strain(Ub))+(Strain(Ub):Strain(du)))-2.0/3.0*(2.0*div(Ub)*div(du))))+gamma/(Pr*Rey)*gradgrad(dT,Ts)
								       // energy
								       +ps*(gamma*M^2*dp-(drho*Tb+Rhob*dT))
								  )
  -int2d(th,mpirank)(AMPFORCE*(usy*duy+usx*dux+Ts*dT+rhos*drho))
  -int2d(th,mpirank)(sigma*(rhos*drho+Rhob*duy*usy+Rhob*dux*usx+Ts*Rhob*dT))+int2d(th,mpirank)(ssvv*(rhos*drho))
  +dirichlet;


varf bmat(def(du,dp,dT,drho),def(us,ps,Ts,rhos))=int2d(th,mpirank)(rhos*drho+Rhob*duy*usy+Rhob*dux*usx+Ts*Rhob*dT);

/////////////////////////////// LOAD BA$E FLOW ///////////////////////////////////////////
int comp=0;

{
//  LoadVecPETSc(Ubx[],pht+"Bflow_Re"+Rey+"_M"+Mbflow+".bin",comp);
                                {
		     cout << "- reading "+pht+"B_flow_Re"+Rey+"_M"+Mbflow+".bin"<< endl;
		                         ifstream file(pht+"B_flow_Re"+Rey+"_M"+Mbflow+".bin");
                                 file >> Ubx[];
                                 cout << "all ok!" << endl;
                                };
};

if(mpirank==0)
  {
    plot(th,Ubx,value=1);
    cout << "### Construction of matrices OP (complex) and B (COMPLEX AS WELL) for cartesian problem" << endl;
    cout << "### Re = " << Rey << endl; 
    cout << "### M = " << M << endl;
    cout << "### sigma = " << sigma << endl;
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////// STABILITY WITH ARPACK //////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////
//                                  A-sigma*B=0


////// BUILD B-MATRIX
real ts=clock();
matrix<complex> Bloc= bmat(XXxxxH,XXxxxH,solver=CG,eps=1e-20);  //////// WARNING: THE SOLVER !!!!!!!!!!!!!!!
matrix<complex> B;
mpiAllReduce(Bloc,B,mpiCommWorld,mpiSUM);
if(mpirank==0)
  {
    cout << "### B is ok !" << endl;
    cout <<" ### B assembled in "<<clock()-ts<<" s"<<endl;
  }
/////  BUILD OP-MATRIX
ts=clock();
matrix<complex> OPloc=op(XXxxxH,XXxxxH);
matrix<complex> OP; 

mpiAllReduce(OPloc,OP,mpiCommWorld,mpiSUM);
set(OP,solver=sparsesolver,sparams=ssparams,tgv=ttgv); 

if(mpirank==0)
  {
    cout << "### OP is ok !" << endl;
    cout <<" ### OP assembled in "<<clock()-ts<<" s"<<endl;
  }


if(mpirank==0)
  {
    cout << "Matrices have been created..." << endl;
    cout << "... starting eigenvalues calculation..."<< endl;
  }
/////////////////////////////////////////////////////////////////////////////////////////////////////

complex[int] ev(nev);
XXxxxH<complex> [int] [eu1,eu2,eu3,eu4,eu5](nev);

///////////////////// CALL TO ARPACK++ ///////////////////////////////////////////////////
int k=EigenValue(OP,B,sigma=sigma,value=ev,vector=eu1,tol=1e-8,maxit=100000000,ncv=ncv,nev=nev);
//////////////////////////////////////////////////////////////////////////////////////////

////////////////////////// CREA DIRECTORY ////////////////////////
string pathspectrum="./Re"+Rey+"_M"+M+"_Mbf"+Mbflow+"_shift"+sigma+"_alpha"+alpha;
if(mpirank==0)
  exec("mkdir -p "+pathspectrum+" ");

//////////////////////////////////// SAVE SPECTRA //////////////////////////////////////////
if(mpirank==0)
  {
    ofstream fileSpectra(pathspectrum+"/Spectra.out",append);
    ofstream fileSigmamax("Sigmamax.out",append);
    for (int j=0;j<k;j++)
      {
        fileSpectra  <<  j << " " <<  real(sigma) << " " << imag(sigma) << " " << Rey << " " << M << " " << real(ev[j]) << " " << imag(ev[j]) << endl;
	if(j==0)
	  { 
	    fileSigmamax << real(sigma) << " " << imag(sigma) << " "<< Rey << " " << M << " " << real(ev[j]) << " " << imag(ev[j]) << endl;
	  } 
      };
  };

/////////////////////////PLOT EIGENFUNCTIONS /////////////////////////////////////////////

int[int] forder=[1,1,1,1,1,1,1,1];
XXxxxH def(upr,ppr,Tpr,rhopr),def(upi,ppi,Tpi,rhopi);

for (int i=0;i<k;i++)
  {
    def(upr,ppr,Tpr,rhopr)=[real(eu1[i]),real(eu2[i]),real(eu3[i]),real(eu4[i]),real(eu5[i])]; 
    def(upi,ppi,Tpi,rhopi)=[imag(eu1[i]),imag(eu2[i]),imag(eu3[i]),imag(eu4[i]),imag(eu5[i])]; 
    
    if(mpirank==0)  
      { 
//	SaveVecComplexPETSc(eu1[i][],pathspectrum+"/directmode_"+i+".bin");
	savevtk(pathspectrum+"/directmode_"+i+".vtk",th,ppr,[uprx,upry,0],Tpr,rhopr,ppi,[upix,upiy,0],Tpi,rhopi,order=forder,dataname="pr velr tempr rhor pi veli tempi rhoi");	

                       {
                  cout << "- reading "+pathspectrum+"directmode_"+i+"_M"+Mbflow+".bin"<< endl;
//                  ofstream file(pathspectrum+"directmode_"+i+"_M"+Mbflow+".bin");
//                  file << uprx[];
                  cout << "all ok!" << endl;
                        };
	
      }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
  }   //END FOR

mpiBarrier(mpiCommWorld);
